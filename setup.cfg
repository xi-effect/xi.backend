[coverage:report]
show_missing = true
skip_covered = true

fail_under = 100

exclude_lines =
  pragma: no cover
  except ImportError
  raise AssertionError
  raise NotImplementedError
  if (not)? (current_)?app.debug:
  if __name__ == .__main__.:
  class .*\(Protocol\):
  @abstractmethod
  @mark.skip

omit =
  */__init__*

  */testing.py
  */_marshals.py

  */discorder.py
  */updater_rst.py

  test/*
  xieffect/test/*

  education/*
  xieffect/education/*

  moderation/*
  xieffect/moderation/*

  alembic/*
  xieffect/alembic/*

[isort]
profile = black
py_version = 39
extend_skip_glob = */alembic/versions/*,*/moderation/*
# multi_line_output = 9
no_inline_sort = True
combine_as_imports = True
known_first_party = common,vault,moderation,users,other,communities,wsgi,api,test,pages
no_lines_before = LOCALFOLDER
reverse_relative = True
line_length = 88

[flake8]
extend-exclude =
  alembic
  moderation

max-line-length = 88

max-arguments = 10
max-decorators = 7
max-local-variables = 10
max-methods = 15
max-module-members = 10
max-name-length = 30
max-returns = 10
max-try-body-length = 2

show-violation-links = True

extend-ignore =
# Style & Naming  TODO mb reconsider
  WPS110 WPS111  # bad naming conventions
  WPS115  # "upper-case constant in a class"  # classes are upper-case because PEP8
  U101  # arguments starting with _ can be unused
  FNE005  # return type of the function is bool, but the name doesn't show it
  FNE007  # "and" can be used in functions names
  FNE008  # function name sometimes will end with it's first argument
  VNE002  # variable names should be clarified

# Do NOT disable features
  WPS100 WPS420  # pass is a thing
  WPS140 WPS141 WPS430 WPS431  # nested functions & classes are a thing
  WPS305 WPS306  # python 2 is EOL, f-strings are the best
  WPS326  # implicit string concatenation
  WPS348  # lines starting with dots are a thing
  WPS412  # logic in __init__ is a thing
  WPS433  # nested imports are a thing
  WPS451  # positional only arguments are a thing
  WPS600  # string enums work via subclassing a builtin
  WPS602  # @staticmetod is a thing
  WPS604  # logic in classes is fine

# False positives
  C  # trailing comma triggered by generators
  Q  # quotes, but literal is better because settings
  VNE001  # triggered by type variables
  NQA102  # no active violations seem to be detected
  WPS441  # control variable used after block triggered by generators
  WPS507  # useless len compare triggered by len(array) == 0

# Weird rules
  ANN101 ANN102  # annotation for self and cls is pointless
  WPS317  # enforces weird indents
  WPS338  # ordering is not linting (same as flake8-class-attributes-order)
  WPS440  # block variables overlap is weird

# Other
  D1 D2 D4 RST304 DAR  # docs
  S311  # shadowed by DUO102
  FI58 FI10 FI11 FI12 FI13 FI14 FI15 FI16 FI17  # future imports for 3.11
  WPS407  # mutable module-level vars are not ideal, but MappingProxyType is worse
  WPS201  # too many

# TODO: In progress
  WPS226  # literal overuse (not making constants for repeating strings)
  WPS421 & T201  # remove prints
  WPS432  # magic number triggered by http codes & pytest.order & the lister
  ANN001 ANN002 ANN003  # argument annotations
  ANN201 ANN204 ANN206  # return annotations (functions & methods - special methods - classmethods)

# TODO: Pretty (run every now and again)
  WPS300  # local imports are shorter
  WPS332  # I like walrus

# TODO not now...
  PT013  # `import pytest` instead of `from pytest`
  PL107  # Path.unlink instead of remove
  PL109  # Path.cwd()
  PL110  # Path.exists instead of os.path.exists
  PL118  # Path / "" instead of join
  PL123 & SCS109  # Path.open instead of open
  TC002 TC003  # type-checking block
  WPS221  # high Jones Complexity
  WPS231  # too much cognitive complexity
  WPS237  # too complex `f` string

per-file-ignores =
  __init__.py: F401 WPS235 FI18
  api.py: WPS201 WPS235
  wsgi.py: WPS201 WPS222 WPS235 WPS433
  _core.py: WPS201 WPS227 WPS236 WPS433
  *_db.py: WPS601 A003 VNE003
  *test*: S101 S106 SCS108 WPS118 WPS202 WPS204 WPS210 WPS213 WPS218 WPS226 WPS230 WPS442 WPS509
  conftest.py: WPS201 S101 S106 SCS108 WPS118 WPS202 WPS204 WPS210 WPS213 WPS218 WPS226 WPS230 WPS442 WPS509
  discorder.py: E501
  consts.py: E501

# WPS201 & WPS235: many imports in __init__, app.py & wsgi.py is the point
# F401: unused imports in __init__ are fine
# WPS433: nested imports
# FI18: future imports are not for __init__

# A003 & VNE003: database's `id`s & `type`s
# WPS601: shadowed class attribute is essential for SQLAlchemy

# S101 & SCS108: asserts
# WPS118: long function names
# WPS201: too many imports (conftest)
# TODO WPS202: too many module members (split test files)
# TODO WPS204: overused expressions (solved with better sio testing utils)
# WPS210 WPS213 WPS218 WPS222 WPS230: too many of whatever
# WPS226: literal overuse (not making constants for repeating strings)
# WPS509: incorrectly nested ternary false triggered

# E501: line too long disabled for constants (easier to copy)

# TODO cohesion (https://github.com/mschwager/cohesion) might be useful as a separate tool
# right now H601 is triggered by Models & Resources as "low cohesion"

# Suppress ANN000-level errors for dummy arguments, defined as _
suppress-dummy-args = True

unused-arguments-ignore-abstract-functions = True
unused-arguments-ignore-overload-functions = True
unused-arguments-ignore-stub-functions = True

test-func-name-validator-regex = test_.*

literal-inline-quotes = double
literal-multiline-quotes = double
literal-docstring-quotes = double
literal-include-name = True
