name: Production Pipeline

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push (push)
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/xieffect:flask-image
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/xieffect:buildcache-back
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/xieffect:buildcache-back,mode=max

      - id: extract
        name: Extract docs for later step
        uses: shrink/actions-docker-extract@v1
        with:
          image: ${{ secrets.DOCKER_HUB_USERNAME }}/xieffect:flask-image
          path: /files/async-api.json

      - name: Upload doc artifact for later step
        uses: actions/upload-artifact@v3
        with:
          name: async-api.json
          path: ${{ steps.extract.outputs.destination }}/async-api.json
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Run pytest
        uses: addnab/docker-run-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          image: ${{ secrets.DOCKER_HUB_USERNAME }}/xieffect:flask-image
          run: sh /app/testing.sh

  docs:
    needs:
      - build
      - test
    runs-on: ubuntu-latest

    steps:
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install asyncapi generator
        run: npm install -g @asyncapi/generator @asyncapi/html-template

      - name: Download async-api.json from artifacts
        uses: actions/download-artifact@v3
        with:
          name: async-api.json
          path: ./async-api.json

      - name: Generate docs
        run: >
          ag ./async-api.json
          @asyncapi/html-template
          --force-write
          -p singleFile=true
          -o ./sio-doc/

      - name: Upload docs via SCP
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ secrets.SERVER_IP }}
          USERNAME: root
          KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        with:
          source: "./sio-doc/*"
          target: "~/xieffect-core/sio-docs-new/"
          strip_components: 1

  deploy:
    needs:
      - build
      - test
      - docs
    runs-on: ubuntu-latest

    steps:
      - name: Run SSH command
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: |
            cd ~/xieffect-core
            docker system prune -a -f
            docker-compose pull flask
            docker-compose up -d
          host: ${{ secrets.SERVER_IP }}
          username: root
          privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
        env:
          CI: true
