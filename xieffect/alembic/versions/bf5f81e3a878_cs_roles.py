"""cs-roles

Revision ID: bf5f81e3a878
Revises: 217fa30f86eb
Create Date: 2022-12-15 15:38:43.339679

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = 'bf5f81e3a878'
down_revision = '217fa30f86eb'
branch_labels = None
depends_on = None


permission_enum = sa.Enum(
    'MANAGE_INVITATIONS',
    'MANAGE_ROLES',
    name='permissiontype',
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table('community_participant', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.Integer()))

    conn = op.get_bind()
    i = 0

    metadata = sa.MetaData(bind=conn)
    Participant = sa.Table('community_participant', metadata, autoload=True, autoload_with=conn)
    for i, data in enumerate(conn.execute(sa.select(Participant)).all()):
        op.execute(
            sa.update(Participant)
            .where(
                Participant.c.community_id == data.community_id,
                Participant.c.user_id == data.user_id,
            )
            .values(id=i)
        )

    with op.batch_alter_table('community_participant', schema=None) as batch_op:
        batch_op.drop_constraint('pk_community_participant')
        batch_op.create_primary_key('pk_community_participant', ['id'])
        batch_op.execute(sa.schema.CreateSequence(sa.schema.Sequence('community_participant_id_seq', start=i + 1)))
        batch_op.alter_column("id", nullable=False, server_default=sa.text("nextval('community_participant_id_seq'::regclass)"))

    op.create_table('cs_roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('color', sa.String(length=6), nullable=True),
    sa.Column('community_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['community.id'], name=op.f('fk_cs_roles_community_id_community'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_cs_roles'))
    )
    op.create_table('cs_role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_type', permission_enum, nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['cs_roles.id'], name=op.f('fk_cs_role_permissions_role_id_cs_roles'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'permission_type', name=op.f('pk_cs_role_permissions'))
    )
    op.create_table('cs_participant_roles',
    sa.Column('participant_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['participant_id'], ['community_participant.id'], name=op.f('fk_cs_participant_roles_participant_id_community_participant'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['cs_roles.id'], name=op.f('fk_cs_participant_roles_role_id_cs_roles'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('participant_id', 'role_id', name=op.f('pk_cs_participant_roles'))
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('cs_participant_roles')
    op.drop_table('cs_role_permissions')
    op.drop_table('cs_roles')
    permission_enum.drop(op.get_bind())

    with op.batch_alter_table('community_participant', schema=None) as batch_op:
        batch_op.drop_constraint('pk_community_participant')
        batch_op.drop_column(column_name='id')
        batch_op.create_primary_key('pk_community_participant', columns=['community_id', 'user_id'])

    with op.batch_alter_table('community_participant', schema=None) as batch_op:
        batch_op.execute(sa.schema.DropSequence(sa.schema.Sequence('community_participant_id_seq')))
    # ### end Alembic commands ###
